
package SwagLabs.SwagLabsAutomate;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

public class Logger {

    private static BufferedWriter writer;

    // Set up the log file (create if not exists)
    public static void setupLogger() {
        try {
            // Create or append to the log file
            File logFile = new File("./Log.txt");
            if (!logFile.exists()) {
                logFile.createNewFile();
            }

            writer = new BufferedWriter(new FileWriter(logFile, true));
        } catch (IOException exception) {
            System.out.println("Error while setting up logger: " + exception.getMessage());
        }
    }

    // Write log message with timestamp to both console and file (Info - success)
    public static void logInfo(String message) {
        String timestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
        String logMessage = timestamp + " - INFO - " + message;

       
        System.out.println("\u001B[30m" + logMessage + "\u001B[0m");

        // Write to log file
        try {
            if (writer != null) {
                writer.write(logMessage);
                writer.newLine();
                writer.flush(); // Ensure the log is written to the file immediately
            }
        } catch (IOException exception) {
            System.out.println("Error while writing log: " + exception.getMessage());
        }
    }

    // Write log message with timestamp to both console and file (Error - failure)
    public static void logError(String message) {
        String timestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
        String logMessage = timestamp + " - ERROR - " + message;

        // Print to console in red (error/failure)
        System.err.println("\u001B[31m" + logMessage + "\u001B[0m");

        // Write to log file
        try {
            if (writer != null) {
                writer.write(logMessage);
                writer.newLine();
                writer.flush(); // Ensure the log is written to the file immediately
            }
        } catch (IOException exception) {
            System.out.println("Error while writing log: " + exception.getMessage());
        }
    }

    // Close the log file
    public static void close() {
        try {
            if (writer != null) {
                writer.close();
            }
        } catch (IOException e) {
            System.out.println("Error while closing log file: " + e.getMessage());
        }
    }
}
